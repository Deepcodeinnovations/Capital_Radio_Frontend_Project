{"version":3,"file":"NewPassword-C1NFHJx1.js","sources":["../../node_modules/lucide-vue-next/dist/esm/icons/log-in.js","../../src/views/auth/NewPassword.vue"],"sourcesContent":["/**\n * @license lucide-vue-next v0.511.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst LogIn = createLucideIcon(\"log-in\", [\n  [\"path\", { d: \"m10 17 5-5-5-5\", key: \"1bsop3\" }],\n  [\"path\", { d: \"M15 12H3\", key: \"6jk70r\" }],\n  [\"path\", { d: \"M15 3h4a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-4\", key: \"u53s6r\" }]\n]);\n\nexport { LogIn as default };\n//# sourceMappingURL=log-in.js.map\n","<template>\r\n    <div class=\"max-w-md w-full space-y-6 bg-white/95 dark:bg-slate-800/95 backdrop-blur-sm p-10 rounded-xl shadow-2xl border border-purple-200 dark:border-slate-700\">\r\n      <!-- Header -->\r\n      <div class=\"text-center\">\r\n        <div class=\"mx-auto w-12 h-12 bg-gradient-to-r from-purple-600 to-orange-500 rounded-full flex items-center justify-center mb-4\">\r\n          <LockIcon class=\"w-6 h-6 text-white\" />\r\n        </div>\r\n        <h2 class=\"text-2xl font-bold text-gray-900 dark:text-white\">Set New Password</h2>\r\n        <p class=\"text-gray-600 dark:text-gray-300 mt-1 max-w-sm mx-auto\">\r\n          Create a strong password for your account. Make sure it's at least 8 characters long.\r\n        </p>\r\n      </div>\r\n  \r\n      <!-- Success Message -->\r\n      <div v-if=\"passwordUpdated\" class=\"bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-lg p-4\">\r\n        <div class=\"flex items-start\">\r\n          <CheckCircleIcon class=\"h-5 w-5 text-green-500 mr-3 flex-shrink-0 mt-0.5\" />\r\n          <div>\r\n            <h4 class=\"font-medium text-green-900 dark:text-green-200 mb-1\">Password updated successfully!</h4>\r\n            <p class=\"text-sm text-green-700 dark:text-green-300\">\r\n              Your password has been changed. You can now sign in with your new password.\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n   \r\n      <!-- Error Alert -->\r\n      <div v-if=\"errorMessage\" class=\"bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-4\">\r\n        <div class=\"flex items-center\">\r\n          <AlertCircleIcon class=\"h-5 w-5 text-red-500 mr-2\" />\r\n          <span class=\"text-sm text-red-700 dark:text-red-400\">{{ errorMessage }}</span>\r\n        </div>\r\n      </div>\r\n  \r\n      <!-- Password Form (hidden after success) -->        \r\n      <form v-if=\"!passwordUpdated\" class=\"space-y-5\" @submit.prevent=\"handleUpdatePassword\">\r\n        <!-- New Password Field -->\r\n        <div>\r\n          <label for=\"password\" class=\"block text-sm font-semibold text-gray-700 dark:text-gray-300 mb-2\">\r\n            New Password\r\n          </label>\r\n          <div class=\"relative\">\r\n            <div class=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\r\n              <LockIcon class=\"h-5 w-5 text-purple-400 dark:text-purple-300\" />\r\n            </div>\r\n            <input\r\n              id=\"password\"\r\n              name=\"password\"\r\n              :type=\"showPassword ? 'text' : 'password'\"\r\n              autocomplete=\"new-password\"\r\n              required\r\n              v-model=\"form.password\"\r\n              @input=\"validatePassword\"\r\n              class=\"block w-full pl-10 pr-10 py-3 border border-gray-300 dark:border-slate-600 rounded-lg shadow-sm placeholder-gray-400 dark:placeholder-gray-500 bg-white dark:bg-slate-700 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all duration-200\"\r\n              placeholder=\"Enter your new password\"\r\n            />\r\n            <button\r\n              type=\"button\"\r\n              @click=\"showPassword = !showPassword\"\r\n              class=\"absolute inset-y-0 right-0 pr-3 flex items-center text-purple-400 dark:text-purple-300 hover:text-purple-600 dark:hover:text-purple-100 transition-colors\"\r\n            >\r\n              <EyeIcon v-if=\"!showPassword\" class=\"h-5 w-5\" />\r\n              <EyeOffIcon v-else class=\"h-5 w-5\" />\r\n            </button>\r\n          </div>\r\n          \r\n          <!-- Password Strength Indicator -->\r\n          <div class=\"mt-3\">\r\n            <div class=\"flex items-center space-x-2 mb-2\">\r\n              <div class=\"flex-1 bg-gray-200 dark:bg-slate-600 rounded-full h-2\">\r\n                <div \r\n                  class=\"h-2 rounded-full transition-all duration-300\"\r\n                  :class=\"passwordStrengthColor\"\r\n                  :style=\"{ width: passwordStrengthWidth }\"\r\n                ></div>\r\n              </div>\r\n              <span class=\"text-xs font-medium\" :class=\"passwordStrengthTextColor\">\r\n                {{ passwordStrengthText }}\r\n              </span>\r\n            </div>\r\n            \r\n            <!-- Password Requirements -->\r\n            <div class=\"space-y-1\">\r\n              <div class=\"flex items-center space-x-2 text-xs\">\r\n                <CheckCircleIcon v-if=\"passwordValidation.length\" class=\"w-3 h-3 text-green-500\" />\r\n                <XIcon v-else class=\"w-3 h-3 text-gray-400\" />\r\n                <span :class=\"passwordValidation.length ? 'text-green-600 dark:text-green-400' : 'text-gray-500 dark:text-gray-400'\">\r\n                  At least 8 characters\r\n                </span>\r\n              </div>\r\n              <div class=\"flex items-center space-x-2 text-xs\">\r\n                <CheckCircleIcon v-if=\"passwordValidation.uppercase\" class=\"w-3 h-3 text-green-500\" />\r\n                <XIcon v-else class=\"w-3 h-3 text-gray-400\" />\r\n                <span :class=\"passwordValidation.uppercase ? 'text-green-600 dark:text-green-400' : 'text-gray-500 dark:text-gray-400'\">\r\n                  One uppercase letter\r\n                </span>\r\n              </div>\r\n              <div class=\"flex items-center space-x-2 text-xs\">\r\n                <CheckCircleIcon v-if=\"passwordValidation.lowercase\" class=\"w-3 h-3 text-green-500\" />\r\n                <XIcon v-else class=\"w-3 h-3 text-gray-400\" />\r\n                <span :class=\"passwordValidation.lowercase ? 'text-green-600 dark:text-green-400' : 'text-gray-500 dark:text-gray-400'\">\r\n                  One lowercase letter\r\n                </span>\r\n              </div>\r\n              <div class=\"flex items-center space-x-2 text-xs\">\r\n                <CheckCircleIcon v-if=\"passwordValidation.number\" class=\"w-3 h-3 text-green-500\" />\r\n                <XIcon v-else class=\"w-3 h-3 text-gray-400\" />\r\n                <span :class=\"passwordValidation.number ? 'text-green-600 dark:text-green-400' : 'text-gray-500 dark:text-gray-400'\">\r\n                  One number\r\n                </span>\r\n              </div>\r\n              <div class=\"flex items-center space-x-2 text-xs\">\r\n                <CheckCircleIcon v-if=\"passwordValidation.special\" class=\"w-3 h-3 text-green-500\" />\r\n                <XIcon v-else class=\"w-3 h-3 text-gray-400\" />\r\n                <span :class=\"passwordValidation.special ? 'text-green-600 dark:text-green-400' : 'text-gray-500 dark:text-gray-400'\">\r\n                  One special character (!@#$%^&*)\r\n                </span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n  \r\n        <!-- Confirm Password Field -->\r\n        <div>\r\n          <label for=\"confirmPassword\" class=\"block text-sm font-semibold text-gray-700 dark:text-gray-300 mb-2\">\r\n            Confirm New Password\r\n          </label>\r\n          <div class=\"relative\">\r\n            <div class=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\r\n              <LockIcon class=\"h-5 w-5 text-purple-400 dark:text-purple-300\" />\r\n            </div>\r\n            <input\r\n              id=\"confirmPassword\"\r\n              name=\"confirmPassword\"\r\n              :type=\"showConfirmPassword ? 'text' : 'password'\"\r\n              autocomplete=\"new-password\"\r\n              required\r\n              v-model=\"form.confirmPassword\"\r\n              class=\"block w-full pl-10 pr-10 py-3 border border-gray-300 dark:border-slate-600 rounded-lg shadow-sm placeholder-gray-400 dark:placeholder-gray-500 bg-white dark:bg-slate-700 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all duration-200\"\r\n              :class=\"{ 'border-red-300 focus:border-red-500 focus:ring-red-500': form.confirmPassword && !passwordsMatch }\"\r\n              placeholder=\"Confirm your new password\"\r\n            />\r\n            <button\r\n              type=\"button\"\r\n              @click=\"showConfirmPassword = !showConfirmPassword\"\r\n              class=\"absolute inset-y-0 right-0 pr-3 flex items-center text-purple-400 dark:text-purple-300 hover:text-purple-600 dark:hover:text-purple-100 transition-colors\"\r\n            >\r\n              <EyeIcon v-if=\"!showConfirmPassword\" class=\"h-5 w-5\" />\r\n              <EyeOffIcon v-else class=\"h-5 w-5\" />\r\n            </button>\r\n          </div>\r\n          \r\n          <!-- Password Match Indicator -->\r\n          <div v-if=\"form.confirmPassword\" class=\"mt-2\">\r\n            <div class=\"flex items-center space-x-2 text-xs\">\r\n              <CheckCircleIcon v-if=\"passwordsMatch\" class=\"w-3 h-3 text-green-500\" />\r\n              <XIcon v-else class=\"w-3 h-3 text-red-500\" />\r\n              <span :class=\"passwordsMatch ? 'text-green-600 dark:text-green-400' : 'text-red-600 dark:text-red-400'\">\r\n                {{ passwordsMatch ? 'Passwords match' : 'Passwords do not match' }}\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n   \r\n        <!-- Submit Button -->\r\n        <button\r\n          type=\"submit\"\r\n          :disabled=\"isLoading || !isFormValid\"\r\n          class=\"relative w-full flex justify-center items-center py-3 px-4 border border-transparent text-sm font-semibold rounded-lg text-white bg-gradient-to-r from-purple-600 to-orange-500 hover:from-purple-700 hover:to-orange-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200 shadow-lg hover:shadow-xl transform hover:-translate-y-0.5\"\r\n        >\r\n          <LoaderIcon v-if=\"isLoading\" class=\"w-5 h-5 mr-2 animate-spin\" />\r\n          <LockIcon v-else class=\"w-5 h-5 mr-2\" />\r\n          {{ isLoading ? 'Updating password...' : 'Update Password' }}\r\n        </button>\r\n      </form>\r\n  \r\n      <!-- Success State Actions -->\r\n      <div v-if=\"passwordUpdated\" class=\"space-y-4\">\r\n        <button\r\n          @click=\"goToLogin\"\r\n          class=\"w-full bg-gradient-to-r from-green-600 to-green-700 hover:from-green-700 hover:to-green-800 text-white font-medium py-3 px-4 rounded-lg transition-all duration-200 flex items-center justify-center shadow-lg hover:shadow-xl transform hover:-translate-y-0.5\"\r\n        >\r\n          <LogInIcon class=\"w-5 h-5 mr-2\" />\r\n          <span>Continue to Sign In</span>\r\n        </button>\r\n      </div>\r\n  \r\n      <!-- Security Notice -->\r\n      <div class=\"mt-8 p-4 bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg\">\r\n        <div class=\"flex\">\r\n          <InfoIcon class=\"w-5 h-5 text-blue-600 dark:text-blue-400 flex-shrink-0 mt-0.5\" />\r\n          <div class=\"ml-3\">\r\n            <h4 class=\"text-sm font-medium text-blue-900 dark:text-blue-200 mb-1\">Security Tips</h4>\r\n            <ul class=\"text-xs text-blue-700 dark:text-blue-300 space-y-1\">\r\n              <li>• Use a unique password you haven't used before</li>\r\n              <li>• Consider using a password manager</li>\r\n              <li>• Don't share your password with anyone</li>\r\n              <li>• Update your password regularly</li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </div>\r\n  \r\n      <!-- Support -->\r\n      <div class=\"mt-6 text-center\">\r\n        <p class=\"text-xs text-gray-500 dark:text-gray-400\">\r\n          Need help? \r\n          <a href=\"mailto:support@capitalradio.co.ug\" class=\"text-purple-600 hover:text-purple-500 dark:text-purple-400 dark:hover:text-purple-300 transition-colors font-medium\">\r\n            Contact support\r\n          </a>\r\n        </p>\r\n      </div>\r\n    </div>\r\n  </template>\r\n   \r\n  <script setup>\r\n  import { ref, reactive, computed, onMounted } from 'vue';\r\n  import { useStore } from 'vuex';\r\n  import { useRouter, useRoute } from 'vue-router';\r\n  import { \r\n    Lock as LockIcon,\r\n    Eye as EyeIcon,\r\n    EyeOff as EyeOffIcon,\r\n    CheckCircle as CheckCircleIcon,\r\n    X as XIcon,\r\n    AlertCircle as AlertCircleIcon,\r\n    Loader as LoaderIcon,\r\n    LogIn as LogInIcon,\r\n    Info as InfoIcon\r\n  } from 'lucide-vue-next';\r\n   \r\n  const store = useStore();\r\n  const router = useRouter();\r\n  const route = useRoute();\r\n  \r\n  // Form state\r\n  const form = reactive({\r\n    password: '',\r\n    confirmPassword: ''\r\n  });\r\n  \r\n  // Component state\r\n  const showPassword = ref(false);\r\n  const showConfirmPassword = ref(false);\r\n  const isLoading = ref(false);\r\n  const passwordUpdated = ref(false);\r\n  const errorMessage = ref('');\r\n  \r\n  // Get token and email from URL params\r\n  const token = ref(route.query.token || '');\r\n  const email = ref(route.query.email || '');\r\n  const admin_id = ref(route.query.admin_id || '');\r\n  \r\n  // Password validation\r\n  const passwordValidation = reactive({\r\n    length: false,\r\n    uppercase: false,\r\n    lowercase: false,\r\n    number: false,\r\n    special: false\r\n  });\r\n  \r\n  // Computed properties\r\n  const passwordsMatch = computed(() => {\r\n    return form.password && form.confirmPassword && form.password === form.confirmPassword;\r\n  });\r\n  \r\n  const passwordStrength = computed(() => {\r\n    const criteria = Object.values(passwordValidation);\r\n    const metCriteria = criteria.filter(Boolean).length;\r\n    return metCriteria;\r\n  });\r\n  \r\n  const passwordStrengthWidth = computed(() => {\r\n    return `${(passwordStrength.value / 5) * 100}%`;\r\n  });\r\n  \r\n  const passwordStrengthColor = computed(() => {\r\n    const strength = passwordStrength.value;\r\n    if (strength <= 1) return 'bg-red-500';\r\n    if (strength <= 2) return 'bg-orange-500';\r\n    if (strength <= 3) return 'bg-yellow-500';\r\n    if (strength <= 4) return 'bg-blue-500';\r\n    return 'bg-green-500';\r\n  });\r\n  \r\n  const passwordStrengthText = computed(() => {\r\n    const strength = passwordStrength.value;\r\n    if (strength <= 1) return 'Weak';\r\n    if (strength <= 2) return 'Fair';\r\n    if (strength <= 3) return 'Good';\r\n    if (strength <= 4) return 'Strong';\r\n    return 'Excellent';\r\n  });\r\n  \r\n  const passwordStrengthTextColor = computed(() => {\r\n    const strength = passwordStrength.value;\r\n    if (strength <= 1) return 'text-red-600 dark:text-red-400';\r\n    if (strength <= 2) return 'text-orange-600 dark:text-orange-400';\r\n    if (strength <= 3) return 'text-yellow-600 dark:text-yellow-400';\r\n    if (strength <= 4) return 'text-blue-600 dark:text-blue-400';\r\n    return 'text-green-600 dark:text-green-400';\r\n  });\r\n  \r\n  const isFormValid = computed(() => {\r\n    return Object.values(passwordValidation).every(Boolean) && passwordsMatch.value;\r\n  });\r\n  \r\n  // Methods\r\n  const validatePassword = () => {\r\n    const password = form.password;\r\n    \r\n    passwordValidation.length = password.length >= 8;\r\n    passwordValidation.uppercase = /[A-Z]/.test(password);\r\n    passwordValidation.lowercase = /[a-z]/.test(password);\r\n    passwordValidation.number = /\\d/.test(password);\r\n    passwordValidation.special = /[!@#$%^&*(),.?\":{}|<>]/.test(password);\r\n  };\r\n  \r\n  const handleUpdatePassword = async () => {\r\n    if (!isFormValid.value) {\r\n      errorMessage.value = 'Please ensure all password requirements are met and passwords match.';\r\n      return;\r\n    }\r\n  \r\n    try {\r\n      isLoading.value = true;\r\n      errorMessage.value = '';\r\n  \r\n      const data = {\r\n        email: email.value,\r\n        password: form.password,\r\n        admin_id: admin_id.value\r\n      };\r\n  \r\n      // Call the reset admin password API directly\r\n      await store.dispatch('resetAdminPassword', data);\r\n  \r\n      // Show success state\r\n      passwordUpdated.value = true;\r\n  \r\n    } catch (error) {\r\n      console.error('Update password error:', error);\r\n      \r\n      // Get error from store or use default message\r\n      errorMessage.value = store.getters.error || error.message || 'Failed to update password. Please try again.';\r\n      \r\n    } finally {\r\n      isLoading.value = false;\r\n    }\r\n  };\r\n  \r\n  const goToLogin = () => {\r\n    router.push({ name: 'Login' });\r\n  };\r\n  \r\n  // Check if we have required params on mount\r\n  onMounted(() => {\r\n    if (!token.value || !email.value) {\r\n      router.push({ name: 'ResetPassword' });\r\n    }\r\n  });\r\n  </script>"],"names":["LogIn","createLucideIcon","store","useStore","router","useRouter","route","useRoute","form","reactive","showPassword","ref","showConfirmPassword","isLoading","passwordUpdated","errorMessage","token","email","admin_id","passwordValidation","passwordsMatch","computed","passwordStrength","passwordStrengthWidth","passwordStrengthColor","strength","passwordStrengthText","passwordStrengthTextColor","isFormValid","validatePassword","password","handleUpdatePassword","data","error","goToLogin","onMounted"],"mappings":"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","x_google_ignoreList":[0]}